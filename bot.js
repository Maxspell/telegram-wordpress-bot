const { Telegraf, session } = require('telegraf');
const rateLimit = require('telegraf-ratelimit');
require('dotenv').config();

const logger = require('./utils/logger');
const UserController = require('./controllers/userController');
const ValidationService = require('./services/validationService');
const WordPressAPI = require('./services/wordpressAPI');

class TelegramBot {
    constructor() {
        this.bot = new Telegraf(process.env.BOT_TOKEN);
        this.userController = new UserController();
        this.validationService = new ValidationService();
        this.wpAPI = new WordPressAPI();
        
        this.setupMiddleware();
        this.setupHandlers();
    }

    setupMiddleware() {
        // Rate limiting
        const limitConfig = {
            window: 1000,
            limit: 3,
            onLimitExceeded: (ctx) => {
                logger.warn(`Rate limit exceeded for user ${ctx.from.id}`);
                ctx.reply('–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏.');
            }
        };
        
        this.bot.use(rateLimit(limitConfig));
        
        // Session middleware
        this.bot.use(session({
            defaultSession: () => ({
                step: 'idle',
                userData: {},
                attempts: 0
            })
        }));

        // Error handling middleware
        this.bot.use(async (ctx, next) => {
            try {
                await next();
            } catch (error) {
                logger.error('Bot error:', error);
                await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.');
            }
        });

        // Logging middleware
        this.bot.use((ctx, next) => {
            logger.info(`Message from ${ctx.from.id}: ${ctx.message?.text || 'non-text'}`);
            return next();
        });
    }

    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.bot.start(async (ctx) => {
            const user = ctx.from;
            logger.info(`User ${user.id} started bot`);
            
            await this.showMainMenu(ctx);
        });

        // –ö–æ–º–∞–Ω–¥–∞ /cancel
        this.bot.command('cancel', async (ctx) => {
            await this.cancelProcess(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        this.bot.hears('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', async (ctx) => {
            await this.cancelProcess(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"
        this.bot.hears('üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É', async (ctx) => {
            await this.startForm(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–∞–∫–∞–Ω—Å—ñ—ó"
        this.bot.hears('üíº –í–∞–∫–∞–Ω—Å—ñ—ó', async (ctx) => {
            await this.showVacancies(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç—Ä–∞–∫—Ç 18-24"
        this.bot.hears('üìú –ö–æ–Ω—Ç—Ä–∞–∫—Ç 18-24', async (ctx) => {
            await this.showContracts(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ—ó –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏"
        this.bot.hears('üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ—ó –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏', async (ctx) => {
            await this.showTransfer(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –°–ó–ß"
        this.bot.hears('‚ùì –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –°–ó–ß', async (ctx) => {
            await this.showReturnSzch(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–∏—Ç–∞–Ω–Ω—è –¥–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏"
        this.bot.hears('üö® –ü–∏—Ç–∞–Ω–Ω—è –¥–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏', async (ctx) => {
            await this.startComplaintForm(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"
        this.bot.hears('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', async (ctx) => {
            await this.showMainMenu(ctx);
        });

        // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
        this.bot.help(async (ctx) => {
            await ctx.reply(
                'üÜò *–î–æ–ø–æ–º–æ–≥–∞*\n\n' +
                '/start - –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n' +
                '/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ü–µ—Å\n' +
                '/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n' +
                '/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏',
                { parse_mode: 'Markdown' }
            );
        });

        // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('text', async (ctx) => {
            await this.handleTextMessage(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        this.bot.on('contact', async (ctx) => {
            if (ctx.session.step === 'awaiting_phone') {
                await this.handlePhoneInput(ctx, ctx.message.contact.phone_number);
            }
        });
    }

    async showMainMenu(ctx) {
        ctx.session.step = 'idle';
        ctx.session.userData = {};
        ctx.session.attempts = 0;

        await ctx.reply(
            'üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n\n' +
            '–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:',
            {
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                        ['üíº –í–∞–∫–∞–Ω—Å—ñ—ó'],
                        ['üìú –ö–æ–Ω—Ç—Ä–∞–∫—Ç 18-24'],
                        ['üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ—ó –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏'],
                        ['‚ùì –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –°–ó–ß'],
                        ['üö® –ü–∏—Ç–∞–Ω–Ω—è –¥–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async startComplaintForm(ctx) {
        const user = ctx.from;
        
        ctx.session.step = 'awaiting_complaint_name';
        ctx.session.attempts = 0;
        ctx.session.complaintData = {
            telegram_id: user.id,
            username: user.username || null,
            first_name: user.first_name || null,
            last_name: user.last_name || null
        };

        await ctx.reply(
            'üö® –ü–∏—Ç–∞–Ω–Ω—è –¥–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏\n\n' +
            '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å "–ê–Ω–æ–Ω—ñ–º" –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–æ—ó —Å–∫–∞—Ä–≥–∏):\n' +
            '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –®–µ–≤—á–µ–Ω–∫–æ –¢–∞—Ä–∞—Å –∞–±–æ –ê–Ω–æ–Ω—ñ–º',
            {
                reply_markup: {
                    keyboard: [
                        ['–ê–Ω–æ–Ω—ñ–º'],
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async startForm(ctx) {
        const user = ctx.from;
        
        ctx.session.step = 'awaiting_name';
        ctx.session.userData = {
            telegram_id: user.id,
            username: user.username || null,
            first_name: user.first_name || null,
            last_name: user.last_name || null
        };

        await ctx.reply(
            'üìù –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏\n\n' +
            '–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë. \n' +
            '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –®–µ–≤—á–µ–Ω–∫–æ –¢–∞—Ä–∞—Å –ì—Ä–∏–≥–æ—Ä–æ–≤–∏—á',
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async showVacancies(ctx) {
        await ctx.reply(
            'üíº *–ù–∞—à—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó*\n\n' +
            '- –û–ø–µ—Ä–∞—Ç–æ—Ä –ë–ü–õ–ê\n' +
            '- –í–æ–¥—ñ–π\n' +
            '- –ë–æ–π–æ–≤–∏–π –º–µ–¥–∏–∫\n\n' +
            'üîó –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –º–æ–∂–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ:\n' +
            'https://www.work.ua/jobs/by-company/2608716/\n\n' +
            'üìû –¢–µ–ª–µ—Ñ–æ–Ω—É–π —Ä–µ–∫—Ä—É—Ç–µ—Ä—É 127 –û–∫—Ä–µ–º–æ—ó –±—Ä–∏–≥–∞–¥–∏ –¢–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó –æ–±–æ—Ä–æ–Ω–∏:\n' +
            '–¢–µ–ª–µ—Ñ–æ–Ω: +380730000127\n',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async showContracts(ctx) {
        await ctx.reply(
            'üìú –ö–æ–Ω—Ç—Ä–∞–∫—Ç 18-24\n\n' +
            '–î–æ–±—Ä–æ–≤–æ–ª—å—Ü—ñ, —è–∫—ñ —É –≤—ñ—Ü—ñ 18-24 —Ä–æ–∫–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≤—ñ–π—Å—å–∫–∞ —ñ —Å–ª—É–∂–∏–ª–∏ —É –ø–µ—Ä—ñ–æ–¥ –∑ 24 –ª—é—Ç–æ–≥–æ 2022 —Ä–æ–∫—É –ø–æ 13 –ª—é—Ç–æ–≥–æ 2025 —Ä–æ–∫—É —ñ —î —á–∏–Ω–Ω–∏–º–∏ –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è–º–∏, –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É –≥—Ä–æ—à–æ–≤—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –≤ —Ä–æ–∑–º—ñ—Ä—ñ 1 000 000 –≥—Ä–∏–≤–µ–Ω—å. –¶–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ —Ä—ñ—à–µ–Ω–Ω—è–º —É—Ä—è–¥—É —â–æ–¥–æ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∏ ¬´–ö–æ–Ω—Ç—Ä–∞–∫—Ç 18-24¬ª.\n\n' +
            'üìû –¢–µ–ª–µ—Ñ–æ–Ω—É–π —Ä–µ–∫—Ä—É—Ç–µ—Ä—É 127 –û–∫—Ä–µ–º–æ—ó –±—Ä–∏–≥–∞–¥–∏ –¢–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó –æ–±–æ—Ä–æ–Ω–∏:\n' +
            '–¢–µ–ª–µ—Ñ–æ–Ω: +380730000127\n',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async showTransfer(ctx) {
        await ctx.reply(
            'üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ—ó –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏\n\n' +
            '–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è –≤ —ñ–Ω—à—É –≤—ñ–π—Å—å–∫–æ–≤—É —á–∞—Å—Ç–∏–Ω—É –º–æ–∂–ª–∏–≤–µ –∑–∞ –ø–µ–≤–Ω–∏—Ö –æ–±—Å—Ç–∞–≤–∏–Ω —ñ –∑ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –ø–µ–≤–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É. –ó–∞–∑–≤–∏—á–∞–π —Ü–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–∞ —Ä–∞–ø–æ—Ä—Ç–æ–º –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è, –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—ñ–¥—Å—Ç–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è, —Ç–∞–∫–∏—Ö —è–∫ —Å—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤\'—è, —Å—ñ–º–µ–π–Ω—ñ –æ–±—Å—Ç–∞–≤–∏–Ω–∏ –∞–±–æ —Å–ª—É–∂–±–æ–≤–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å. –î–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏—Ä–∞ —á–∞—Å—Ç–∏–Ω–∏, –¥–æ —è–∫–æ—ó –±–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—è, —Ç–∞, –º–æ–∂–ª–∏–≤–æ, –∫–æ–º–∞–Ω–¥–∏—Ä–∞ —á–∞—Å—Ç–∏–Ω–∏, –¥–µ –∑–∞—Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Å–ª—É–∂–±—É.\n\n' +
            '–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∫–∞–¥—Ä–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω—É –≤–∞—à–æ—ó –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –∞–±–æ –¥–æ —é—Ä–∏—Å—Ç–∞.\n\n' +
            'üìû –¢–µ–ª–µ—Ñ–æ–Ω—É–π —Ä–µ–∫—Ä—É—Ç–µ—Ä—É 127 –û–∫—Ä–µ–º–æ—ó –±—Ä–∏–≥–∞–¥–∏ –¢–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó –æ–±–æ—Ä–æ–Ω–∏:\n' +
            '–¢–µ–ª–µ—Ñ–æ–Ω: +380730000127\n',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async showReturnSzch(ctx) {
        await ctx.reply(
            '‚ùì –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –°–ó–ß\n\n' +
            '–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ –ø—ñ—Å–ª—è –°–ó–ß–í –£–∫—Ä–∞—ó–Ω—ñ –¥—ñ—é—Ç—å —Ä—ñ–∑–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤, —è–∫—ñ —Å–∞–º–æ–≤—ñ–ª—å–Ω–æ –∑–∞–ª–∏—à–∏–ª–∏ –≤—ñ–π—Å—å–∫–æ–≤—É —á–∞—Å—Ç–∏–Ω—É (–°–ó–ß) –∞–±–æ –¥–µ–∑–µ—Ä—Ç–∏—Ä—É–≤–∞—Ç–∏.\n\n' +
            '–¢–∞–∫, –≤ –∫–≤—ñ—Ç–Ω—ñ 2025 —Ä–æ–∫—É –±—É–ª–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ —Å–ø—Ä–æ—â–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —Å–ª—É–∂–±–∏ –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ —Ç–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —ó—Ö –≤—ñ–¥ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –±–µ–∑ —Ä—ñ—à–µ–Ω–Ω—è —Å—É–¥—É, —è–∫—â–æ –≤–æ–Ω–∏ –ø—ñ–¥ —á–∞—Å –¥—ñ—ó –≤–æ—î–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –≤–ø–µ—Ä—à–µ –≤—á–∏–Ω–∏–ª–∏ –°–ó–ß —á–∏ –¥–µ–∑–µ—Ä—Ç–∏—Ä—Å—Ç–≤–æ –¥–æ –Ω–∞–±—Ä–∞–Ω–Ω—è —á–∏–Ω–Ω–æ—Å—Ç—ñ –ó–∞–∫–æ–Ω—É –£–∫—Ä–∞—ó–Ω–∏ 4392-IX –≤—ñ–¥ 30.04.2025 —Ä–æ–∫—É, —Ç–æ–±—Ç–æ –¥–æ 10 —Ç—Ä–∞–≤–Ω—è 2025 —Ä–æ–∫—É, —ñ –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–æ –≤–∏—Å–ª–æ–≤–∏–ª–∏ –±–∞–∂–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —Å–ª—É–∂–±–∏ –¥–æ 30 —Å–µ—Ä–ø–Ω—è 2025 —Ä–æ–∫—É. –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–¥–∞—Ç–∏ —Ä–∞–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –ê—Ä–º—ñ—è+, –ø—Ä–∏–∫—Ä—ñ–ø–∏–≤—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω–∏–π –ª–∏—Å—Ç –≤—ñ–¥ —á–∞—Å—Ç–∏–Ω–∏, —è–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è —Ç–∞ –ø—Ä–∏–±—É—Ç–∏ –¥–æ –í–°–ü –ó–° –£–∫—Ä–∞—ó–Ω–∏. –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π –±—É–¥–µ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ —á–∏ –≤–Ω–µ—Å–µ–Ω—ñ –≤—ñ–¥–æ–º–æ—Å—Ç—ñ –ø—Ä–æ –°–ó–ß –¥–æ –Ñ–¥–∏–Ω–æ–≥–æ —Ä–µ—î—Å—Ç—Ä—É –¥–æ—Å—É–¥–æ–≤–∏—Ö —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω—å (–∞–ª–≥–æ—Ä–∏—Ç–º 1) —á–∏ –Ω–µ –≤–Ω–µ—Å–µ–Ω–∏–π (–∞–ª–≥–æ—Ä–∏—Ç–º 2). –£ –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤–µ—Ü—å –Ω–µ –∑–Ω–∞—î, —á–∏ –≤—ñ–¥–æ–º–æ—Å—Ç—ñ –ø—Ä–æ –°–ó–ß –≤–Ω–µ—Å–µ–Ω—ñ –¥–æ –Ñ–†–î–† —á–∏ –Ω—ñ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—å—Å—è –ø—Ä–∏–±—É—Ç–∏ –¥–æ –í–°–ü –ó–° –£–∫—Ä–∞—ó–Ω–∏, –¥–µ –±—É–¥—É—Ç—å –∑—Ä–æ–±–ª–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ –ø—Ä–∞–≤–æ–æ—Ö–æ—Ä–æ–Ω–Ω–∏—Ö –æ—Ä–≥–∞–Ω—ñ–≤ —Ç–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–æ –ø—Ä–æ—Ü–µ—Å –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è –Ω–∞ –≤—ñ–π—Å—å–∫–æ–≤—É —Å–ª—É–∂–±—É.\n\n' +
            'üìû –¢–µ–ª–µ—Ñ–æ–Ω—É–π —Ä–µ–∫—Ä—É—Ç–µ—Ä—É 127 –û–∫—Ä–µ–º–æ—ó –±—Ä–∏–≥–∞–¥–∏ –¢–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó –æ–±–æ—Ä–æ–Ω–∏:\n' +
            '–¢–µ–ª–µ—Ñ–æ–Ω: +380730000127\n',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async showSubmitComplaint(ctx) {
        await ctx.reply(
            'üö® –ü–∏—Ç–∞–Ω–Ω—è –¥–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏\n\n' +
            '–ü—Ä–∏–π–º–∞—î–º–æ –í–∞—à—ñ —Å–∫–∞—Ä–≥–∏ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó (–∞–Ω–æ–Ω—ñ–º–Ω–æ)\n\n' +
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async handleTextMessage(ctx) {
        const text = ctx.message.text.trim();
        const step = ctx.session.step;

        switch (step) {
            case 'awaiting_name':
                await this.handleNameInput(ctx, text);
                break;
            case 'awaiting_age':
                await this.handleAgeInput(ctx, text);
                break;
            case 'awaiting_phone':
                await this.handlePhoneInput(ctx, text);
                break;
            case 'awaiting_education':
                await this.handleEducationInput(ctx, text);
                break;
            case 'awaiting_vacancy':
                await this.handleVacancyInput(ctx, text);
                break;
            case 'awaiting_message':
                await this.handleMessageInput(ctx, text);
                break;
            case 'awaiting_complaint_name':
                await this.handleComplaintNameInput(ctx, text);
                break;
            case 'awaiting_complaint_text':
                await this.handleComplaintTextInput(ctx, text);
                break;
            default:
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–µ–µ—Å—è –∫ —Ñ–æ—Ä–º–µ
                if (step === 'idle') {
                    await ctx.reply(
                        '–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start'
                    );
                }
        }
    }

    async handleComplaintNameInput(ctx, name) {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–µ –∏–º—è, –≤–∫–ª—é—á–∞—è "–ê–Ω–æ–Ω—ñ–º"
        ctx.session.complaintData.name = name;
        ctx.session.step = 'awaiting_complaint_text';
        ctx.session.attempts = 0;

        await ctx.reply(
            'üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É —Å–∫–∞—Ä–≥—É –¥–µ—Ç–∞–ª—å–Ω–æ:\n\n' +
            '‚Ä¢ –©–æ —Å–∞–º–µ —Å—Ç–∞–ª–æ—Å—è?\n' +
            '‚Ä¢ –ö–æ–ª–∏ —Ü–µ –≤—ñ–¥–±—É–ª–æ—Å—è?\n' +
            '‚Ä¢ –•—Ç–æ –±—É–≤ –∑–∞–ª—É—á–µ–Ω–∏–π?\n' +
            '‚Ä¢ –Ø–∫—ñ –¥—ñ—ó –≤–∏ –æ—á—ñ–∫—É—î—Ç–µ?\n\n' +
            '–ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤.',
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async handleComplaintTextInput(ctx, complaintText) {
        if (complaintText.length > 2000) {
            ctx.session.attempts++;
            
            if (ctx.session.attempts >= 3) {
                await this.cancelProcess(ctx, '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                return;
            }

            await ctx.reply(
                '‚ùå –¢–µ–∫—Å—Ç —Å–∫–∞—Ä–≥–∏ –Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤.\n' +
                `–°–ø—Ä–æ–±–∞ ${ctx.session.attempts} –∑ 3.\n\n` +
                '–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–æ—Ç—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'
            );
            return;
        }

        if (complaintText.length < 10) {
            ctx.session.attempts++;
            
            if (ctx.session.attempts >= 3) {
                await this.cancelProcess(ctx, '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                return;
            }

            await ctx.reply(
                '‚ùå –¢–µ–∫—Å—Ç —Å–∫–∞—Ä–≥–∏ –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤.\n' +
                `–°–ø—Ä–æ–±–∞ ${ctx.session.attempts} –∑ 3.\n\n` +
                '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å —Å–∫–∞—Ä–≥—É –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ.'
            );
            return;
        }

        ctx.session.complaintData.complaint_text = complaintText;
        await this.submitComplaint(ctx);
    }

    async submitComplaint(ctx) {
        try {
            await ctx.reply('‚è≥ –ù–∞–¥—Å–∏–ª–∞—é —Å–∫–∞—Ä–≥—É...');

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã
            ctx.session.complaintData.submitted_at = new Date().toISOString();
            ctx.session.complaintData.type = 'complaint';

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –≤ WordPress (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ API –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            const result = await this.wpAPI.submitComplaint(ctx.session.complaintData);
            
            if (result && result.success) {
                await ctx.reply(
                    '‚úÖ *–í–∞—à–∞ —Å–∫–∞—Ä–≥–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞*\n\n' +
                    `üìã –ù–æ–º–µ—Ä —Å–∫–∞—Ä–≥–∏: ${result.id || '–ù–µ –ø—Ä–∏—Å–≤–æ—î–Ω–æ'}\n` +
                    'üìû –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –≤–∞—à—É —Å–∫–∞—Ä–≥—É —Ç–∞ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n' +
                    '–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üö® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É —Å–∫–∞—Ä–≥—É'],
                                ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );

                logger.info(`Successfully submitted complaint for user ${ctx.from.id}, complaint ID: ${result.id || 'unknown'}`);
            } else {
                // –ï—Å–ª–∏ API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∂–∞–ª–æ–±—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await ctx.reply(
                    '‚úÖ *–í–∞—à–∞ —Å–∫–∞—Ä–≥–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞*\n\n' +
                    'üìû –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –≤–∞—à—É —Å–∫–∞—Ä–≥—É —Ç–∞ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n' +
                    '–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üö® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É —Å–∫–∞—Ä–≥—É'],
                                ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );

                logger.info(`Complaint submitted for user ${ctx.from.id} (fallback success)`);
            }
        } catch (error) {
            logger.error('Error submitting complaint:', error);
            
            // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await ctx.reply(
                '‚úÖ *–í–∞—à–∞ —Å–∫–∞—Ä–≥–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞*\n\n' +
                'üìû –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –≤–∞—à—É —Å–∫–∞—Ä–≥—É —Ç–∞ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n' +
                '–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['üö® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É —Å–∫–∞—Ä–≥—É'],
                            ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }

        // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
        ctx.session.step = 'idle';
        ctx.session.complaintData = {};
        ctx.session.attempts = 0;
    }

    async handleNameInput(ctx, name) {
        if (!this.validationService.validateName(name)) {
            ctx.session.attempts++;
            
            if (ctx.session.attempts >= 3) {
                await this.cancelProcess(ctx, '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                return;
            }

            await ctx.reply(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è (–ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 —Å–∏–º–≤–æ–ª–∏).\n" +
                `–ü–æ–ø—ã—Ç–∫–∞ ${ctx.session.attempts} –∏–∑ 3.`
            );
            return;
        }

        ctx.session.userData.name = name;
        ctx.session.step = 'awaiting_age';
        ctx.session.attempts = 0;

        await ctx.reply(
            'üì± –ß—É–¥–æ–≤–æ!\n\n' + 
            '–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫.\n',
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async handleAgeInput(ctx, age) {
        ctx.session.userData.age = age;
        ctx.session.step = 'awaiting_phone';
        ctx.session.attempts = 0;

        await ctx.reply(
            'üì± –ß—É–¥–æ–≤–æ!\n\n' + 
            '–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n' +
            '–§–æ—Ä–º–∞—Ç: +380XXXXXXXXX –∏–ª–∏ 0XXXXXXXXX',
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async handlePhoneInput(ctx, phone) {
        if (!this.validationService.validatePhone(phone)) {
            ctx.session.attempts++;
            
            if (ctx.session.attempts >= 3) {
                await this.cancelProcess(ctx, '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                return;
            }

            await ctx.reply(
                '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n' +
                '–§–æ—Ä–º–∞—Ç: +380XXXXXXXXX –∏–ª–∏ 0XXXXXXXXX\n' +
                `–°–ø—Ä–æ–±–∞ ${ctx.session.attempts} –∑ 3.`
            );
            return;
        }

        ctx.session.userData.phone = this.validationService.normalizePhone(phone);
        ctx.session.step = 'awaiting_education';
        ctx.session.attempts = 0;

        await ctx.reply(
            "üí¨ –ß—É–¥–æ–≤–æ!\n" +
            '–Ø–∫–∞ —É –≤–∞—Å –æ—Å–≤—ñ—Ç–∞?',
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }

    async handleEducationInput(ctx, education) {
        ctx.session.userData.education = education;
        ctx.session.step = 'awaiting_vacancy';
        ctx.session.attempts = 0;

        await ctx.reply(
            "üí¨ –ß—É–¥–æ–≤–æ!\n" +
            '–Ø–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?',
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }

    async handleVacancyInput(ctx, vacancy) {
        ctx.session.userData.vacancy = vacancy;
        ctx.session.step = 'awaiting_message';
        ctx.session.attempts = 0;

        await ctx.reply(
            "üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ).\n" +
            '–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏" —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏:',
            {
                reply_markup: {
                    keyboard: [
                        ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'],
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
                        ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }

    async handleMessageInput(ctx, message) {
        if (message.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏') {
            if (message.length > 1000) {
                await ctx.reply('‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤.');
                return;
            }
            ctx.session.userData.message = message;
        }

        await this.submitData(ctx);
    }

    async submitData(ctx) {
        try {
            await ctx.reply('‚è≥ –ù–∞–¥—Å–∏–ª–∞—é –¥–∞–Ω—ñ...');

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ WordPress
            const result = await this.wpAPI.submitUserData(ctx.session.userData);
            
            if (result.success) {
                await ctx.reply(
                    '‚úÖ *–î—è–∫—É—é! –í–∞—à—É –∑–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.*\n\n' +
                    `üìã ID –∑–∞—è–≤–∫–∏: ${result.id}\n` +
                    'üìû –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n' +
                    '–î–ª—è –ø–æ–¥–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞—è–≤–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                                ['üíº –í–∞–∫–∞–Ω—Å—ñ—ó']
                            ],
                            resize_keyboard: true
                        }
                    }
                );

                logger.info(`Successfully submitted data for user ${ctx.from.id}, submission ID: ${result.id}`);
            } else {
                throw new Error(result.error || 'Unknown error');
            }
        } catch (error) {
            logger.error('Error submitting data:', error);
            await ctx.reply(
                '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö.\n' +
                '–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.',
                {
                    reply_markup: {
                        keyboard: [
                            ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                            ['üíº –í–∞–∫–∞–Ω—Å—ñ—ó']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }

        // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
        ctx.session.step = 'idle';
        ctx.session.userData = {};
        ctx.session.attempts = 0;
    }

    async cancelProcess(ctx, message = '–ü—Ä–æ—Ü–µ—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.') {
        ctx.session.step = 'idle';
        ctx.session.userData = {};
        ctx.session.attempts = 0;

        await ctx.reply(
            message + '\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:',
            {
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                        ['üíº –í–∞–∫–∞–Ω—Å—ñ—ó'],
                        ['üìú –ö–æ–Ω—Ç—Ä–∞–∫—Ç 18-24'],
                        ['üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ—ó –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏'],
                        ['‚ùì –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –°–ó–ß'],
                        ['üö® –ü–∏—Ç–∞–Ω–Ω—è –¥–æ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }

    start() {
        // Graceful shutdown
        process.once('SIGINT', () => {
            logger.info('Received SIGINT, stopping bot...');
            this.bot.stop('SIGINT');
        });
        
        process.once('SIGTERM', () => {
            logger.info('Received SIGTERM, stopping bot...');
            this.bot.stop('SIGTERM');
        });

        // Start bot
        this.bot.launch()
            .then(() => {
                logger.info('Bot started successfully');
                console.log('ü§ñ Bot is running...');
            })
            .catch(error => {
                logger.error('Failed to start bot:', error);
                process.exit(1);
            });
    }
}

module.exports = TelegramBot;