const { Telegraf, session } = require('telegraf');
const rateLimit = require('telegraf-ratelimit');
require('dotenv').config();

const logger = require('./utils/logger');
const UserController = require('./controllers/userController');
const ValidationService = require('./services/validationService');
const WordPressAPI = require('./services/wordpressAPI');

class TelegramBot {
    constructor() {
        this.bot = new Telegraf(process.env.BOT_TOKEN);
        this.userController = new UserController();
        this.validationService = new ValidationService();
        this.wpAPI = new WordPressAPI();
        
        this.setupMiddleware();
        this.setupHandlers();
    }

    setupMiddleware() {
        // Rate limiting
        const limitConfig = {
            window: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
            limit: 3, // 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
            onLimitExceeded: (ctx) => {
                logger.warn(`Rate limit exceeded for user ${ctx.from.id}`);
                ctx.reply('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.');
            }
        };
        
        this.bot.use(rateLimit(limitConfig));
        
        // Session middleware
        this.bot.use(session({
            defaultSession: () => ({
                step: 'idle',
                userData: {},
                attempts: 0
            })
        }));

        // Error handling middleware
        this.bot.use(async (ctx, next) => {
            try {
                await next();
            } catch (error) {
                logger.error('Bot error:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
            }
        });

        // Logging middleware
        this.bot.use((ctx, next) => {
            logger.info(`Message from ${ctx.from.id}: ${ctx.message?.text || 'non-text'}`);
            return next();
        });
    }

    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.start(async (ctx) => {
            const user = ctx.from;
            logger.info(`User ${user.id} started bot`);
            
            ctx.session.step = 'awaiting_name';
            ctx.session.userData = {
                telegram_id: user.id,
                username: user.username || null,
                first_name: user.first_name || null,
                last_name: user.last_name || null
            };

            await ctx.reply(
                'üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n\n' +
                '–Ø –¥–æ–ø–æ–º–æ–∂—É –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É. –î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –ü–Ü–ë:',
                {
                    reply_markup: {
                        keyboard: [['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏']],
                        resize_keyboard: true,
                        one_time_keyboard: false
                    }
                }
            );
        });

        // –ö–æ–º–∞–Ω–¥–∞ /cancel
        this.bot.command('cancel', async (ctx) => {
            await this.cancelProcess(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        this.bot.hears('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', async (ctx) => {
            await this.cancelProcess(ctx);
        });

        // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
        this.bot.help(async (ctx) => {
            await ctx.reply(
                'üÜò *–ü–æ–º–æ—â—å*\n\n' +
                '/start - –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n' +
                '/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å\n' +
                '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
                '/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏',
                { parse_mode: 'Markdown' }
            );
        });

        // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('text', async (ctx) => {
            await this.handleTextMessage(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        this.bot.on('contact', async (ctx) => {
            if (ctx.session.step === 'awaiting_phone') {
                await this.handlePhoneInput(ctx, ctx.message.contact.phone_number);
            }
        });
    }

    async handleTextMessage(ctx) {
        const text = ctx.message.text.trim();
        const step = ctx.session.step;

        switch (step) {
            case 'awaiting_name':
                await this.handleNameInput(ctx, text);
                break;
            case 'awaiting_phone':
                await this.handlePhoneInput(ctx, text);
                break;
            case 'awaiting_email':
                await this.handleEmailInput(ctx, text);
                break;
            case 'awaiting_message':
                await this.handleMessageInput(ctx, text);
                break;
            default:
                await ctx.reply(
                    '–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n' +
                    '–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ - /help'
                );
        }
    }

    async handleNameInput(ctx, name) {
        if (!this.validationService.validateName(name)) {
            ctx.session.attempts++;
            
            if (ctx.session.attempts >= 3) {
                await this.cancelProcess(ctx, '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                return;
            }

            await ctx.reply(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è (–ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 —Å–∏–º–≤–æ–ª–∏).\n" +
                `–ü–æ–ø—ã—Ç–∫–∞ ${ctx.session.attempts} –∏–∑ 3.`
            );
            return;
        }

        ctx.session.userData.name = name;
        ctx.session.step = 'awaiting_phone';
        ctx.session.attempts = 0;

        await ctx.reply(
            'üì± –ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
            {
                reply_markup: {
                    keyboard: [
                        [{ text: 'üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }],
                        ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            }
        );
    }

    async handlePhoneInput(ctx, phone) {
        if (!this.validationService.validatePhone(phone)) {
            ctx.session.attempts++;
            
            if (ctx.session.attempts >= 3) {
                await this.cancelProcess(ctx, '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                return;
            }

            await ctx.reply(
                '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n' +
                '–§–æ—Ä–º–∞—Ç: +38XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n' +
                `–°–ø—Ä–æ–±–∞ ${ctx.session.attempts} –∑ 3.`
            );
            return;
        }

        ctx.session.userData.phone = this.validationService.normalizePhone(phone);
        ctx.session.step = 'awaiting_email';
        ctx.session.attempts = 0;

        await ctx.reply(
            'üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à email –∞–¥—Ä–µ—Å:',
            {
                reply_markup: {
                    keyboard: [['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏']],
                    resize_keyboard: true
                }
            }
        );
    }

    async handleEmailInput(ctx, email) {
        if (!this.validationService.validateEmail(email)) {
            ctx.session.attempts++;
            
            if (ctx.session.attempts >= 3) {
                await this.cancelProcess(ctx, '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                return;
            }

            await ctx.reply(
                '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–¥—Ä–µ—Å.\n' +
                `–°–ø—Ä–æ–±–∞ ${ctx.session.attempts} –∏–∑ 3.`
            );
            return;
        }

        ctx.session.userData.email = email.toLowerCase();
        ctx.session.step = 'awaiting_message';
        ctx.session.attempts = 0;

        await ctx.reply(
            "üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ).\n" +
            '–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å:',
            {
                reply_markup: {
                    keyboard: [['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'], ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏']],
                    resize_keyboard: true
                }
            }
        );
    }

    async handleMessageInput(ctx, message) {
        if (message.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏') {
            if (message.length > 1000) {
                await ctx.reply('‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤.');
                return;
            }
            ctx.session.userData.message = message;
        }

        await this.submitData(ctx);
    }

    async submitData(ctx) {
        try {
            await ctx.reply('‚è≥ –ù–∞–¥—Å–∏–ª–∞—é –¥–∞–Ω—ñ...');

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ WordPress
            const result = await this.wpAPI.submitUserData(ctx.session.userData);
            
            if (result.success) {
                await ctx.reply(
                    '‚úÖ *–î—è–∫—É—é! –í–∞—à—É –∑–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.*\n\n' +
                    `üìã ID –∑–∞—è–≤–∫–∏: ${result.id}\n` +
                    'üìû –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n' +
                    '–î–ª—è –ø–æ–¥–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞—è–≤–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: { remove_keyboard: true }
                    }
                );

                logger.info(`Successfully submitted data for user ${ctx.from.id}, submission ID: ${result.id}`);
            } else {
                throw new Error(result.error || 'Unknown error');
            }
        } catch (error) {
            logger.error('Error submitting data:', error);
            await ctx.reply(
                '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö.\n' +
                '–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.',
                { reply_markup: { remove_keyboard: true } }
            );
        }

        // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
        ctx.session.step = 'idle';
        ctx.session.userData = {};
        ctx.session.attempts = 0;
    }

    async cancelProcess(ctx, message = '–ü—Ä–æ—Ü–µ—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.') {
        ctx.session.step = 'idle';
        ctx.session.userData = {};
        ctx.session.attempts = 0;

        await ctx.reply(
            message + '\n\n–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start',
            { reply_markup: { remove_keyboard: true } }
        );
    }

    start() {
        // Graceful shutdown
        process.once('SIGINT', () => {
            logger.info('Received SIGINT, stopping bot...');
            this.bot.stop('SIGINT');
        });
        
        process.once('SIGTERM', () => {
            logger.info('Received SIGTERM, stopping bot...');
            this.bot.stop('SIGTERM');
        });

        // Start bot
        this.bot.launch()
            .then(() => {
                logger.info('Bot started successfully');
                console.log('ü§ñ Bot is running...');
            })
            .catch(error => {
                logger.error('Failed to start bot:', error);
                process.exit(1);
            });
    }
}

module.exports = TelegramBot;